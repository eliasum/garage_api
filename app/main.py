# 2025.09.16 12:27 IMM

"""
Простое приложение для учета запчастей в гараже.
(Временная версия без FastAPI)

Многострочный комментарий (docstring). Используется для описания модуля, класса или функции.
Этот текст может быть later использован для автоматической генерации документации.
"""


# Определяем класс Part (Запчасть).
# Класс - это чертеж для создания объектов. Аналогично class в C#.
class Part:
    # Метод __init__ - это конструктор объекта. Вызывается при создании нового экземпляра класса (новой запчасти).
    # 'self' - это ссылка на текущий экземпляр объекта (аналогично 'this' в C#). Все методы класса первым аргументом принимают self.
    # id: int, name: str - это аннотации типов (type hints). Python их игнорирует при выполнении, но они помогают разработчикам и IDE понимать, какие типы данных ожидаются.
    def __init__(self, id: int, name: str, part_number: str, quantity: int):
        # Создаем атрибуты (поля) объекта и присваиваем им значения, переданные в конструктор.
        self.id = id  # Уникальный идентификатор запчасти
        self.name = name  # Название запчасти (например, "Масляный фильтр")
        self.part_number = part_number  # Каталожный номер
        self.quantity = quantity  # Количество на складе

    # Магический метод __str__. Определяет, как объект будет преобразован в строку при вызове str(part) или print(part).
    # Аналогично переопределению метода ToString() в C#.
    def __str__(self):
        # Возвращаем форматированную строку (f-string). Выражения в фигурных скобках {} вычисляются и подставляются в строку.
        return f"Part(id={self.id}, name='{self.name}', part_number='{self.part_number}', quantity={self.quantity})"


# Класс Garage (Гараж) представляет собой "репозиторий" или "сервис" для управления запчастями.
class Garage:
    def __init__(self):
        # Инициализируем пустой список для хранения всех запчастей.
        # Список (list) в Python - это аналог List<T> в C#. Изменяемая коллекция.
        self.parts = []
        # Счетчик для автоматической генерации уникальных ID для новых запчастей.
        self.next_id = 1

    # Метод для добавления новой запчасти.
    def add_part(self, name: str, part_number: str, quantity: int):
        # Создаем новый объект Part, передавая текущий next_id в качестве ID.
        part = Part(self.next_id, name, part_number, quantity)
        # Добавляем созданный объект в список parts.
        self.parts.append(part)  # append - аналог Add() для List<T> в C#.
        # Увеличиваем счетчик ID для следующей запчасти.
        self.next_id += 1
        # Возвращаем созданный объект вызывающему коду.
        return part

    # Метод для получения списка всех запчастей.
    def list_parts(self):
        # Просто возвращаем весь список parts.
        return self.parts

    # Метод для поиска запчасти по её ID.
    def find_part(self, part_id: int):
        # Проходим циклом for по всем запчастям в списке self.parts.
        # Цикл for в Python похож на foreach в C#.
        for part in self.parts:
            # Если ID текущей запчасти в цикле совпадает с искомым...
            if part.id == part_id:
                # ...возвращаем эту запчасть.
                return part
        # Если цикл завершился, а запчасть не найдена, возвращаем None (аналог null в C#).
        return None


# Функция main - главная точка входа в наше консольное приложение.
def main():
    # Создаем экземпляр (объект) класса Garage. Вызывается конструктор __init__.
    garage = Garage()

    # Добавляем несколько запчастей в гараж, вызывая метод add_part.
    # Т.к. мы не используем базу данных, они будут храниться только в оперативной памяти (в списке parts).
    garage.add_part("Масляный фильтр", "OC 90", 5)
    garage.add_part("Воздушный фильтр", "AF 123", 3)
    garage.add_part("Свеча зажигания", "SP 456", 10)

    # Выводим заголовок в консоль.
    print("Запчасти в гараже:")
    print("=================")
    # Получаем список всех запчастей и в цикле выводим каждую.
    # Метод list_parts возвращает список, цикл for перебирает его элементы.
    for part in garage.list_parts():
        # Для каждого объекта part вызывается его метод __str__, и результат выводится в консоль.
        print(part)

    # Пробуем найти одну запчасть по ID.
    print("\nПоиск запчасти с ID=2:")
    # Вызываем метод поиска.
    found = garage.find_part(2)
    # Проверяем, был ли результат поиска успешным (т.е. found не равен None).
    if found:
        # Если нашли, выводим её.
        print(found)
    else:
        # Если не нашли, выводим сообщение.
        print("Запчасть не найдена")


# Это стандартная для Python проверка: был ли этот файл запущен напрямую?
# Если да (а не импортирован как модуль в другом файле), то выполняется блок кода под if.
# Аналогично методу Main в C#, который является точкой входа в приложение.
if __name__ == "__main__":
    # Вызываем нашу главную функцию.
    main()
